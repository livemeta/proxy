util.$exec= function (cmd, thread, args, success, failure, timeout) {
        thread = thread || lua.MAIN_THREAD;
        args = [cmd].concat(args || []);
        thread === 0 && console.error('-----------------', cmd, thread)

        // 调用lua接口
        var c = lua.genLuaCall.apply(null, args);
        var defer = $.Deferred().done(success).fail(failure);
        lua.runLuaCode(thread, c, function (response) {
            try {
                if (cmd === 'qn.GetPlayerInfo') {
                    response = response.replace(/\\\\/, 'dddddddddddd');
                    response = response.replace(/([^\\])(\\)([^\\])/g, '$1$3');
                    response = response.replace(/(dddddddddddd)/g, '\\');
                }
                var data = JSON.parse(response) || {};
                if (data.msg == 'MSG_' + cmd + '_DONE') {
                    var argData = [];
                    var index = 1;
                    do {
                        argData.push(data['param' + index++]);
                    } while (data['param' + index]);
                    defer.resolve.apply(defer, argData);
                }
            } catch (ex) {
                var errStr = 'LuaCall Error[' + cmd + ']';
                util.log(response);
                util.log(errStr, 2);
                util.log([ex, 'init.js', 'util.$exec', errStr], 3);
                defer.reject();
            }
        }, defer.reject);

        // 设置超时
        timeout && setTimeout(function () {
            defer.reject(cmd + ' timeout');
        }, timeout);
        return defer;
    }
